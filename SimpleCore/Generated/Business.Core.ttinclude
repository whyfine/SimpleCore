<#@ template language="C#" debug="false" hostSpecific="true" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.ComponentModel" #>
<#+ 
    string EntityNamespace="";
	string EntityParamterNamespace="";
    string DataAccessNamespace="";
	string BusinessNamespace="";
    List<Type> Types;
    List<Type> LoadTypes(string typeNamespace)
	{
		using (Stream stream = File.OpenRead(this.Host.ResolvePath("..\\bin\\Debug\\SimpleCore.dll")))
		{
			byte[] rawAssembly = new byte[stream.Length];
			stream.Read(rawAssembly, 0, (int)stream.Length);
			return Assembly.Load(rawAssembly).GetExportedTypes().Where(t => t.IsClass && t.Namespace.Equals(typeNamespace,StringComparison.OrdinalIgnoreCase)).ToList();
		}
		//修改原因：Assembly.LoadFrom会占用dll的打开状态
		//return Assembly.LoadFrom(Host.ResolvePath("..\\bin\\Debug\\SimpleCore.dll")).GetExportedTypes().Where(t => t.IsClass && t.Namespace.Equals(typeNamespace,StringComparison.OrdinalIgnoreCase)).ToList();
	}
	string DefaultStringByType(Type t,string valstring)
	{
		if(t.IsValueType)
		{
			if(t.IsGenericType &&
                t.GetGenericTypeDefinition() == typeof(Nullable<>))
					 if(t.Equals(typeof(Nullable<DateTime>)))
						return "DateTime.Now";
					return valstring+".GetValueOrDefault()";
			return valstring;
		}
		else if(t.Equals(typeof(string)))
		{
			return "string.Empty";
		}
		else
		{
			return "null";
		}
	}
	string CheckIsNullString(Type t,string valstring)
    {
		if(t.IsValueType)
		{
			if(t.IsGenericType &&
                t.GetGenericTypeDefinition() == typeof(Nullable<>))
				return valstring+".HasValue";
			return null;
		}
		else if(t.Equals(typeof(string)))
		{
			return "!string.IsNullOrEmpty("+valstring+")";
		}
		else
		{
			return valstring+"!=null";
		}
	}
	string GetValueByType(Type t,string valstring)
    {
		if(t.IsValueType)
		{
			//值类型
			if(t.IsGenericType &&
                t.GetGenericTypeDefinition() == typeof(Nullable<>))
				//可空值类型
				return valstring+".Value";
			return valstring;
		}
		else if(t.Equals(typeof(string)))
		{
			return valstring;
		}
		else
		{
			return valstring;
		}
	}
#>